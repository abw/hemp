An incomplete list of things TODO, in no particular order.

* hemp_element_parse_block() and various other methods need access to the 
  elements factory.  I think this should probably be encasulated in the 
  scope object.

* double and single quoted strings need to check for backslashes and 
  and generate constant values on demand.  The default text  method for 
  quoted strings (hemp_element_quoted_text()) returns the source token 
  "tucked in" by one character at each end to remove the quotes.  Once we've 
  got proper tokenisation working (i.e. identifying escaped characters and
  interpolated variables) then we can mark quoted values as literal or 
  otherwise and only generate a value for non-literal strings when required.

* Control tags and double quoted strings need to have tokens hanging off
  a BRANCH (or we need to figure out a different way to skin this cat 
  compared to how the Perl TT3 prototype works).  next() might need to 
  become a method dispatched via the element vtable.

* Figure out what needs to go into the element data structure value union
  to represent all the various different element types.

* Decide how to represent values and implement.  I want to try and unify as 
  much of the API between elements and values as possible.  Consider
  nanboxing.

* This is my first time using autotools, and I'm sure I've made plenty of
  nooby mistakes.  The whole autoconf/automake/libtool setup needs cleaning
  up, ideally by someone more familiar with the tools than me.

* Add cleanup methods for squote and dquote to release the text memory when
  HEMP_FLAG_FIXED is not set.

* filesystem is a quick hack... needs doing properly

* Factory used named passed as argument to cache instance in hash.  We
  can't guarantee that it's statically allocated.  Previous we used the 
  allocated name in, e.g. dialect->name

* Figure out a nice way to implement exceptions.  Ideally we want the 
  flexibility of the Perl/Badger approach that allows a main error type to
  be defined (e.g. parse error), along with sub-type and any arguments.
  This should result in a nice error message being generated from the 
  type/subtype and args.  UPDATE: got some of the way there with hemp_throw()
  and hemp_error_init() functions.  Now need to be able to add things like
  source position / scope for parse errors.

* Decide what to do about HempElementTagStart, HempElementComment, etc.
  Ideally they should be encapsulated in a grammar definition, but we also
  want the commonly used elements to be readily available.  We don't want to
  be doing a hash lookup for known elements, only for dynamically assigned
  keywords, operators, etc.
 
* Add a fallback mechanism to the various factories.  e.g. if a tt3 dialect
  is requested and not found then the fallback should call hemp_language("tt3")
  to give it a chance to load it.  Just got to be careful we don't end up in
  a deathly spiral if we then re-attempt the lookup and it fails again.

* inline tag scan: make quotes, comments, etc., all standard operators.
  Define a scan method for them and invoke it on detection.
 
 
Parsing refactor 
----------------


